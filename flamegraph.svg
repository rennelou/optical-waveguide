<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="513"><g><title>__GI___libc_free (3 samples, 0.58%)</title><rect x="0.0000%" y="325" width="0.5848%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="3"/><text x="0.2500%" y="335.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.39%)</title><rect x="0.5848%" y="325" width="0.3899%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="2"/><text x="0.8348%" y="335.50"></text></g><g><title>_int_malloc (1 samples, 0.19%)</title><rect x="0.9747%" y="325" width="0.1949%" height="15" fill="rgb(221,193,54)" fg:x="5" fg:w="1"/><text x="1.2247%" y="335.50"></text></g><g><title>rust_fdmbpm::fp::matrix::unhash (3 samples, 0.58%)</title><rect x="1.1696%" y="325" width="0.5848%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="3"/><text x="1.4196%" y="335.50"></text></g><g><title>[[heap]] (12 samples, 2.34%)</title><rect x="0.0000%" y="341" width="2.3392%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="12"/><text x="0.2500%" y="351.50">[..</text></g><g><title>rust_fdmbpm::fp::matrix::view::&lt;impl rust_fdmbpm::fp::matrix::MatrixView&lt;T,_&gt;&gt;::get (3 samples, 0.58%)</title><rect x="1.7544%" y="325" width="0.5848%" height="15" fill="rgb(232,128,0)" fg:x="9" fg:w="3"/><text x="2.0044%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.19%)</title><rect x="2.3392%" y="325" width="0.1949%" height="15" fill="rgb(207,160,47)" fg:x="12" fg:w="1"/><text x="2.5892%" y="335.50"></text></g><g><title>H5MM_strdup (1 samples, 0.19%)</title><rect x="2.5341%" y="325" width="0.1949%" height="15" fill="rgb(228,23,34)" fg:x="13" fg:w="1"/><text x="2.7841%" y="335.50"></text></g><g><title>__GI___libc_free (2 samples, 0.39%)</title><rect x="2.7290%" y="325" width="0.3899%" height="15" fill="rgb(218,30,26)" fg:x="14" fg:w="2"/><text x="2.9790%" y="335.50"></text></g><g><title>[[stack]] (5 samples, 0.97%)</title><rect x="2.3392%" y="341" width="0.9747%" height="15" fill="rgb(220,122,19)" fg:x="12" fg:w="5"/><text x="2.5892%" y="351.50"></text></g><g><title>hypotf32x (1 samples, 0.19%)</title><rect x="3.1189%" y="325" width="0.1949%" height="15" fill="rgb(250,228,42)" fg:x="16" fg:w="1"/><text x="3.3689%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.19%)</title><rect x="3.3138%" y="325" width="0.1949%" height="15" fill="rgb(240,193,28)" fg:x="17" fg:w="1"/><text x="3.5638%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.19%)</title><rect x="3.5088%" y="325" width="0.1949%" height="15" fill="rgb(216,20,37)" fg:x="18" fg:w="1"/><text x="3.7588%" y="335.50"></text></g><g><title>__GI___libc_free (2 samples, 0.39%)</title><rect x="3.7037%" y="325" width="0.3899%" height="15" fill="rgb(206,188,39)" fg:x="19" fg:w="2"/><text x="3.9537%" y="335.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.19%)</title><rect x="4.0936%" y="325" width="0.1949%" height="15" fill="rgb(217,207,13)" fg:x="21" fg:w="1"/><text x="4.3436%" y="335.50"></text></g><g><title>__calloc (6 samples, 1.17%)</title><rect x="4.2885%" y="325" width="1.1696%" height="15" fill="rgb(231,73,38)" fg:x="22" fg:w="6"/><text x="4.5385%" y="335.50"></text></g><g><title>_int_free (7 samples, 1.36%)</title><rect x="5.4581%" y="325" width="1.3645%" height="15" fill="rgb(225,20,46)" fg:x="28" fg:w="7"/><text x="5.7081%" y="335.50"></text></g><g><title>_int_malloc (3 samples, 0.58%)</title><rect x="6.8226%" y="325" width="0.5848%" height="15" fill="rgb(210,31,41)" fg:x="35" fg:w="3"/><text x="7.0726%" y="335.50"></text></g><g><title>_int_realloc (2 samples, 0.39%)</title><rect x="7.4074%" y="325" width="0.3899%" height="15" fill="rgb(221,200,47)" fg:x="38" fg:w="2"/><text x="7.6574%" y="335.50"></text></g><g><title>rust_fdmbpm::fp::matrix::unhash (3 samples, 0.58%)</title><rect x="7.7973%" y="325" width="0.5848%" height="15" fill="rgb(226,26,5)" fg:x="40" fg:w="3"/><text x="8.0473%" y="335.50"></text></g><g><title>[unknown] (27 samples, 5.26%)</title><rect x="3.3138%" y="341" width="5.2632%" height="15" fill="rgb(249,33,26)" fg:x="17" fg:w="27"/><text x="3.5638%" y="351.50">[unkno..</text></g><g><title>rust_fdmbpm::fp::matrix::view::&lt;impl rust_fdmbpm::fp::matrix::MatrixView&lt;T,_&gt;&gt;::get (1 samples, 0.19%)</title><rect x="8.3821%" y="325" width="0.1949%" height="15" fill="rgb(235,183,28)" fg:x="43" fg:w="1"/><text x="8.6321%" y="335.50"></text></g><g><title>__GI___libc_free (2 samples, 0.39%)</title><rect x="8.5770%" y="341" width="0.3899%" height="15" fill="rgb(221,5,38)" fg:x="44" fg:w="2"/><text x="8.8270%" y="351.50"></text></g><g><title>_int_malloc (1 samples, 0.19%)</title><rect x="8.9669%" y="341" width="0.1949%" height="15" fill="rgb(247,18,42)" fg:x="46" fg:w="1"/><text x="9.2169%" y="351.50"></text></g><g><title>atan2f32x (30 samples, 5.85%)</title><rect x="10.5263%" y="133" width="5.8480%" height="15" fill="rgb(241,131,45)" fg:x="54" fg:w="30"/><text x="10.7763%" y="143.50">atan2f3..</text></g><g><title>[libm-2.33.so] (30 samples, 5.85%)</title><rect x="10.5263%" y="117" width="5.8480%" height="15" fill="rgb(249,31,29)" fg:x="54" fg:w="30"/><text x="10.7763%" y="127.50">[libm-2..</text></g><g><title>rust_fdmbpm::export::hdf5 (38 samples, 7.41%)</title><rect x="10.1365%" y="165" width="7.4074%" height="15" fill="rgb(225,111,53)" fg:x="52" fg:w="38"/><text x="10.3865%" y="175.50">rust_fdmbp..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (38 samples, 7.41%)</title><rect x="10.1365%" y="149" width="7.4074%" height="15" fill="rgb(238,160,17)" fg:x="52" fg:w="38"/><text x="10.3865%" y="159.50">&lt;alloc::ve..</text></g><g><title>hypotf32x (6 samples, 1.17%)</title><rect x="16.3743%" y="133" width="1.1696%" height="15" fill="rgb(214,148,48)" fg:x="84" fg:w="6"/><text x="16.6243%" y="143.50"></text></g><g><title>__hypot_finite (5 samples, 0.97%)</title><rect x="16.5692%" y="117" width="0.9747%" height="15" fill="rgb(232,36,49)" fg:x="85" fg:w="5"/><text x="16.8192%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (27 samples, 5.26%)</title><rect x="19.8830%" y="101" width="5.2632%" height="15" fill="rgb(209,103,24)" fg:x="102" fg:w="27"/><text x="20.1330%" y="111.50">&lt;core:..</text></g><g><title>&lt;rust_fdmbpm::waveguide::cores::rectilinear::Rectilinear as rust_fdmbpm::waveguide::cores::Core&gt;::get_n (2 samples, 0.39%)</title><rect x="24.7563%" y="85" width="0.3899%" height="15" fill="rgb(229,88,8)" fg:x="127" fg:w="2"/><text x="25.0063%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (29 samples, 5.65%)</title><rect x="19.8830%" y="133" width="5.6530%" height="15" fill="rgb(213,181,19)" fg:x="102" fg:w="29"/><text x="20.1330%" y="143.50">&lt;core::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (29 samples, 5.65%)</title><rect x="19.8830%" y="117" width="5.6530%" height="15" fill="rgb(254,191,54)" fg:x="102" fg:w="29"/><text x="20.1330%" y="127.50">&lt;alloc:..</text></g><g><title>__GI___libc_malloc (2 samples, 0.39%)</title><rect x="25.1462%" y="101" width="0.3899%" height="15" fill="rgb(241,83,37)" fg:x="129" fg:w="2"/><text x="25.3962%" y="111.50"></text></g><g><title>_int_malloc (2 samples, 0.39%)</title><rect x="25.1462%" y="85" width="0.3899%" height="15" fill="rgb(233,36,39)" fg:x="129" fg:w="2"/><text x="25.3962%" y="95.50"></text></g><g><title>__GI___libc_free (2 samples, 0.39%)</title><rect x="25.5361%" y="133" width="0.3899%" height="15" fill="rgb(226,3,54)" fg:x="131" fg:w="2"/><text x="25.7861%" y="143.50"></text></g><g><title>_int_free (2 samples, 0.39%)</title><rect x="25.5361%" y="117" width="0.3899%" height="15" fill="rgb(245,192,40)" fg:x="131" fg:w="2"/><text x="25.7861%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (45 samples, 8.77%)</title><rect x="17.5439%" y="149" width="8.7719%" height="15" fill="rgb(238,167,29)" fg:x="90" fg:w="45"/><text x="17.7939%" y="159.50">&lt;alloc::vec:..</text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.39%)</title><rect x="25.9259%" y="133" width="0.3899%" height="15" fill="rgb(232,182,51)" fg:x="133" fg:w="2"/><text x="26.1759%" y="143.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.39%)</title><rect x="25.9259%" y="117" width="0.3899%" height="15" fill="rgb(231,60,39)" fg:x="133" fg:w="2"/><text x="26.1759%" y="127.50"></text></g><g><title>_int_realloc (2 samples, 0.39%)</title><rect x="25.9259%" y="101" width="0.3899%" height="15" fill="rgb(208,69,12)" fg:x="133" fg:w="2"/><text x="26.1759%" y="111.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.39%)</title><rect x="25.9259%" y="85" width="0.3899%" height="15" fill="rgb(235,93,37)" fg:x="133" fg:w="2"/><text x="26.1759%" y="95.50"></text></g><g><title>rust_fdmbpm::fp::matrix::zip (3 samples, 0.58%)</title><rect x="26.3158%" y="149" width="0.5848%" height="15" fill="rgb(213,116,39)" fg:x="135" fg:w="3"/><text x="26.5658%" y="159.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.58%)</title><rect x="26.3158%" y="133" width="0.5848%" height="15" fill="rgb(222,207,29)" fg:x="135" fg:w="3"/><text x="26.5658%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.19%)</title><rect x="30.6043%" y="133" width="0.1949%" height="15" fill="rgb(206,96,30)" fg:x="157" fg:w="1"/><text x="30.8543%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.19%)</title><rect x="30.6043%" y="117" width="0.1949%" height="15" fill="rgb(218,138,4)" fg:x="157" fg:w="1"/><text x="30.8543%" y="127.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.19%)</title><rect x="30.6043%" y="101" width="0.1949%" height="15" fill="rgb(250,191,14)" fg:x="157" fg:w="1"/><text x="30.8543%" y="111.50"></text></g><g><title>_int_realloc (1 samples, 0.19%)</title><rect x="30.6043%" y="85" width="0.1949%" height="15" fill="rgb(239,60,40)" fg:x="157" fg:w="1"/><text x="30.8543%" y="95.50"></text></g><g><title>_int_malloc (1 samples, 0.19%)</title><rect x="30.6043%" y="69" width="0.1949%" height="15" fill="rgb(206,27,48)" fg:x="157" fg:w="1"/><text x="30.8543%" y="79.50"></text></g><g><title>malloc_consolidate (1 samples, 0.19%)</title><rect x="30.6043%" y="53" width="0.1949%" height="15" fill="rgb(225,35,8)" fg:x="157" fg:w="1"/><text x="30.8543%" y="63.50"></text></g><g><title>__GI___libc_free (7 samples, 1.36%)</title><rect x="33.5283%" y="117" width="1.3645%" height="15" fill="rgb(250,213,24)" fg:x="172" fg:w="7"/><text x="33.7783%" y="127.50"></text></g><g><title>_int_free (4 samples, 0.78%)</title><rect x="34.1131%" y="101" width="0.7797%" height="15" fill="rgb(247,123,22)" fg:x="175" fg:w="4"/><text x="34.3631%" y="111.50"></text></g><g><title>__calloc (22 samples, 4.29%)</title><rect x="37.8168%" y="101" width="4.2885%" height="15" fill="rgb(231,138,38)" fg:x="194" fg:w="22"/><text x="38.0668%" y="111.50">__cal..</text></g><g><title>_int_malloc (10 samples, 1.95%)</title><rect x="40.1559%" y="85" width="1.9493%" height="15" fill="rgb(231,145,46)" fg:x="206" fg:w="10"/><text x="40.4059%" y="95.50">_..</text></g><g><title>__rdl_alloc_zeroed (4 samples, 0.78%)</title><rect x="42.1053%" y="101" width="0.7797%" height="15" fill="rgb(251,118,11)" fg:x="216" fg:w="4"/><text x="42.3553%" y="111.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (2 samples, 0.39%)</title><rect x="42.4951%" y="85" width="0.3899%" height="15" fill="rgb(217,147,25)" fg:x="218" fg:w="2"/><text x="42.7451%" y="95.50"></text></g><g><title>rust_fdmbpm::waveguide::fdmbpm::get_alphas_betas (83 samples, 16.18%)</title><rect x="26.9006%" y="149" width="16.1793%" height="15" fill="rgb(247,81,37)" fg:x="138" fg:w="83"/><text x="27.1506%" y="159.50">rust_fdmbpm::waveguide::f..</text></g><g><title>rust_fdmbpm::fp::matrix::view::&lt;impl rust_fdmbpm::fp::matrix::MatrixView&lt;T,_&gt;&gt;::get (63 samples, 12.28%)</title><rect x="30.7992%" y="133" width="12.2807%" height="15" fill="rgb(209,12,38)" fg:x="158" fg:w="63"/><text x="31.0492%" y="143.50">rust_fdmbpm::fp::m..</text></g><g><title>rust_fdmbpm::fp::matrix::unhash (42 samples, 8.19%)</title><rect x="34.8928%" y="117" width="8.1871%" height="15" fill="rgb(227,1,9)" fg:x="179" fg:w="42"/><text x="35.1428%" y="127.50">rust_fdmbpm..</text></g><g><title>__rust_alloc_zeroed (1 samples, 0.19%)</title><rect x="42.8850%" y="101" width="0.1949%" height="15" fill="rgb(248,47,43)" fg:x="220" fg:w="1"/><text x="43.1350%" y="111.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.19%)</title><rect x="45.6140%" y="69" width="0.1949%" height="15" fill="rgb(221,10,30)" fg:x="234" fg:w="1"/><text x="45.8640%" y="79.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.39%)</title><rect x="45.6140%" y="117" width="0.3899%" height="15" fill="rgb(210,229,1)" fg:x="234" fg:w="2"/><text x="45.8640%" y="127.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.39%)</title><rect x="45.6140%" y="101" width="0.3899%" height="15" fill="rgb(222,148,37)" fg:x="234" fg:w="2"/><text x="45.8640%" y="111.50"></text></g><g><title>_int_realloc (2 samples, 0.39%)</title><rect x="45.6140%" y="85" width="0.3899%" height="15" fill="rgb(234,67,33)" fg:x="234" fg:w="2"/><text x="45.8640%" y="95.50"></text></g><g><title>_int_malloc (1 samples, 0.19%)</title><rect x="45.8090%" y="69" width="0.1949%" height="15" fill="rgb(247,98,35)" fg:x="235" fg:w="1"/><text x="46.0590%" y="79.50"></text></g><g><title>__GI___libc_free (8 samples, 1.56%)</title><rect x="47.9532%" y="101" width="1.5595%" height="15" fill="rgb(247,138,52)" fg:x="246" fg:w="8"/><text x="48.2032%" y="111.50"></text></g><g><title>_int_free (7 samples, 1.36%)</title><rect x="48.1481%" y="85" width="1.3645%" height="15" fill="rgb(213,79,30)" fg:x="247" fg:w="7"/><text x="48.3981%" y="95.50"></text></g><g><title>__rust_dealloc (2 samples, 0.39%)</title><rect x="49.5127%" y="101" width="0.3899%" height="15" fill="rgb(246,177,23)" fg:x="254" fg:w="2"/><text x="49.7627%" y="111.50"></text></g><g><title>__calloc (15 samples, 2.92%)</title><rect x="55.1657%" y="85" width="2.9240%" height="15" fill="rgb(230,62,27)" fg:x="283" fg:w="15"/><text x="55.4157%" y="95.50">__..</text></g><g><title>_int_malloc (4 samples, 0.78%)</title><rect x="57.3099%" y="69" width="0.7797%" height="15" fill="rgb(216,154,8)" fg:x="294" fg:w="4"/><text x="57.5599%" y="79.50"></text></g><g><title>rust_fdmbpm::waveguide::fdmbpm::get_ds (78 samples, 15.20%)</title><rect x="43.0799%" y="149" width="15.2047%" height="15" fill="rgb(244,35,45)" fg:x="221" fg:w="78"/><text x="43.3299%" y="159.50">rust_fdmbpm::waveguide:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (78 samples, 15.20%)</title><rect x="43.0799%" y="133" width="15.2047%" height="15" fill="rgb(251,115,12)" fg:x="221" fg:w="78"/><text x="43.3299%" y="143.50">&lt;alloc::vec::Vec&lt;T&gt; as ..</text></g><g><title>rust_fdmbpm::fp::matrix::view::&lt;impl rust_fdmbpm::fp::matrix::MatrixView&lt;T,_&gt;&gt;::get (63 samples, 12.28%)</title><rect x="46.0039%" y="117" width="12.2807%" height="15" fill="rgb(240,54,50)" fg:x="236" fg:w="63"/><text x="46.2539%" y="127.50">rust_fdmbpm::fp::m..</text></g><g><title>rust_fdmbpm::fp::matrix::unhash (43 samples, 8.38%)</title><rect x="49.9025%" y="101" width="8.3821%" height="15" fill="rgb(233,84,52)" fg:x="256" fg:w="43"/><text x="50.1525%" y="111.50">rust_fdmbpm:..</text></g><g><title>__rust_alloc_zeroed (1 samples, 0.19%)</title><rect x="58.0897%" y="85" width="0.1949%" height="15" fill="rgb(207,117,47)" fg:x="298" fg:w="1"/><text x="58.3397%" y="95.50"></text></g><g><title>__GI___libc_free (8 samples, 1.56%)</title><rect x="59.6491%" y="117" width="1.5595%" height="15" fill="rgb(249,43,39)" fg:x="306" fg:w="8"/><text x="59.8991%" y="127.50"></text></g><g><title>_int_free (8 samples, 1.56%)</title><rect x="59.6491%" y="101" width="1.5595%" height="15" fill="rgb(209,38,44)" fg:x="306" fg:w="8"/><text x="59.8991%" y="111.50"></text></g><g><title>unlink_chunk.constprop.0 (1 samples, 0.19%)</title><rect x="61.0136%" y="85" width="0.1949%" height="15" fill="rgb(236,212,23)" fg:x="313" fg:w="1"/><text x="61.2636%" y="95.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.78%)</title><rect x="61.2086%" y="117" width="0.7797%" height="15" fill="rgb(242,79,21)" fg:x="314" fg:w="4"/><text x="61.4586%" y="127.50"></text></g><g><title>__memmove_avx_unaligned_erms (130 samples, 25.34%)</title><rect x="61.9883%" y="117" width="25.3411%" height="15" fill="rgb(211,96,35)" fg:x="318" fg:w="130"/><text x="62.2383%" y="127.50">__memmove_avx_unaligned_erms</text></g><g><title>__rdl_dealloc (1 samples, 0.19%)</title><rect x="87.3294%" y="117" width="0.1949%" height="15" fill="rgb(253,215,40)" fg:x="448" fg:w="1"/><text x="87.5794%" y="127.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.19%)</title><rect x="87.3294%" y="101" width="0.1949%" height="15" fill="rgb(211,81,21)" fg:x="448" fg:w="1"/><text x="87.5794%" y="111.50"></text></g><g><title>__rust_alloc (1 samples, 0.19%)</title><rect x="87.5244%" y="117" width="0.1949%" height="15" fill="rgb(208,190,38)" fg:x="449" fg:w="1"/><text x="87.7744%" y="127.50"></text></g><g><title>[libc-2.33.so] (1 samples, 0.19%)</title><rect x="91.6179%" y="53" width="0.1949%" height="15" fill="rgb(235,213,38)" fg:x="470" fg:w="1"/><text x="91.8679%" y="63.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.39%)</title><rect x="91.8129%" y="53" width="0.3899%" height="15" fill="rgb(237,122,38)" fg:x="471" fg:w="2"/><text x="92.0629%" y="63.50"></text></g><g><title>_int_free (5 samples, 0.97%)</title><rect x="92.2027%" y="53" width="0.9747%" height="15" fill="rgb(244,218,35)" fg:x="473" fg:w="5"/><text x="92.4527%" y="63.50"></text></g><g><title>__GI___libc_realloc (50 samples, 9.75%)</title><rect x="89.4737%" y="85" width="9.7466%" height="15" fill="rgb(240,68,47)" fg:x="459" fg:w="50"/><text x="89.7237%" y="95.50">__GI___libc_re..</text></g><g><title>_int_realloc (49 samples, 9.55%)</title><rect x="89.6686%" y="69" width="9.5517%" height="15" fill="rgb(210,16,53)" fg:x="460" fg:w="49"/><text x="89.9186%" y="79.50">_int_realloc</text></g><g><title>_int_malloc (31 samples, 6.04%)</title><rect x="93.1774%" y="53" width="6.0429%" height="15" fill="rgb(235,124,12)" fg:x="478" fg:w="31"/><text x="93.4274%" y="63.50">_int_mal..</text></g><g><title>unlink_chunk.constprop.0 (2 samples, 0.39%)</title><rect x="98.8304%" y="37" width="0.3899%" height="15" fill="rgb(224,169,11)" fg:x="507" fg:w="2"/><text x="99.0804%" y="47.50"></text></g><g><title>__libc_start_main (459 samples, 89.47%)</title><rect x="10.1365%" y="325" width="89.4737%" height="15" fill="rgb(250,166,2)" fg:x="52" fg:w="459"/><text x="10.3865%" y="335.50">__libc_start_main</text></g><g><title>main (459 samples, 89.47%)</title><rect x="10.1365%" y="309" width="89.4737%" height="15" fill="rgb(242,216,29)" fg:x="52" fg:w="459"/><text x="10.3865%" y="319.50">main</text></g><g><title>std::rt::lang_start_internal (459 samples, 89.47%)</title><rect x="10.1365%" y="293" width="89.4737%" height="15" fill="rgb(230,116,27)" fg:x="52" fg:w="459"/><text x="10.3865%" y="303.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (459 samples, 89.47%)</title><rect x="10.1365%" y="277" width="89.4737%" height="15" fill="rgb(228,99,48)" fg:x="52" fg:w="459"/><text x="10.3865%" y="287.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (459 samples, 89.47%)</title><rect x="10.1365%" y="261" width="89.4737%" height="15" fill="rgb(253,11,6)" fg:x="52" fg:w="459"/><text x="10.3865%" y="271.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (459 samples, 89.47%)</title><rect x="10.1365%" y="245" width="89.4737%" height="15" fill="rgb(247,143,39)" fg:x="52" fg:w="459"/><text x="10.3865%" y="255.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (459 samples, 89.47%)</title><rect x="10.1365%" y="229" width="89.4737%" height="15" fill="rgb(236,97,10)" fg:x="52" fg:w="459"/><text x="10.3865%" y="239.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (459 samples, 89.47%)</title><rect x="10.1365%" y="213" width="89.4737%" height="15" fill="rgb(233,208,19)" fg:x="52" fg:w="459"/><text x="10.3865%" y="223.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (459 samples, 89.47%)</title><rect x="10.1365%" y="197" width="89.4737%" height="15" fill="rgb(216,164,2)" fg:x="52" fg:w="459"/><text x="10.3865%" y="207.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust_fdmbpm::main (459 samples, 89.47%)</title><rect x="10.1365%" y="181" width="89.4737%" height="15" fill="rgb(220,129,5)" fg:x="52" fg:w="459"/><text x="10.3865%" y="191.50">rust_fdmbpm::main</text></g><g><title>rust_fdmbpm::waveguide::fdmbpm::slab2d::run (421 samples, 82.07%)</title><rect x="17.5439%" y="165" width="82.0663%" height="15" fill="rgb(242,17,10)" fg:x="90" fg:w="421"/><text x="17.7939%" y="175.50">rust_fdmbpm::waveguide::fdmbpm::slab2d::run</text></g><g><title>rust_fdmbpm::waveguide::fdmbpm::get_recurrence_form (212 samples, 41.33%)</title><rect x="58.2846%" y="149" width="41.3255%" height="15" fill="rgb(242,107,0)" fg:x="299" fg:w="212"/><text x="58.5346%" y="159.50">rust_fdmbpm::waveguide::fdmbpm::get_recurrence_form</text></g><g><title>&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (212 samples, 41.33%)</title><rect x="58.2846%" y="133" width="41.3255%" height="15" fill="rgb(251,28,31)" fg:x="299" fg:w="212"/><text x="58.5346%" y="143.50">&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (61 samples, 11.89%)</title><rect x="87.7193%" y="117" width="11.8908%" height="15" fill="rgb(233,223,10)" fg:x="450" fg:w="61"/><text x="87.9693%" y="127.50">alloc::raw_vec::Ra..</text></g><g><title>alloc::raw_vec::finish_grow (54 samples, 10.53%)</title><rect x="89.0838%" y="101" width="10.5263%" height="15" fill="rgb(215,21,27)" fg:x="457" fg:w="54"/><text x="89.3338%" y="111.50">alloc::raw_vec:..</text></g><g><title>__rdl_realloc (2 samples, 0.39%)</title><rect x="99.2203%" y="85" width="0.3899%" height="15" fill="rgb(232,23,21)" fg:x="509" fg:w="2"/><text x="99.4703%" y="95.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.19%)</title><rect x="99.4152%" y="69" width="0.1949%" height="15" fill="rgb(244,5,23)" fg:x="510" fg:w="1"/><text x="99.6652%" y="79.50"></text></g><g><title>dl_main (1 samples, 0.19%)</title><rect x="99.6101%" y="293" width="0.1949%" height="15" fill="rgb(226,81,46)" fg:x="511" fg:w="1"/><text x="99.8601%" y="303.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.19%)</title><rect x="99.6101%" y="277" width="0.1949%" height="15" fill="rgb(247,70,30)" fg:x="511" fg:w="1"/><text x="99.8601%" y="287.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.19%)</title><rect x="99.6101%" y="261" width="0.1949%" height="15" fill="rgb(212,68,19)" fg:x="511" fg:w="1"/><text x="99.8601%" y="271.50"></text></g><g><title>all (513 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(240,187,13)" fg:x="0" fg:w="513"/><text x="0.2500%" y="383.50"></text></g><g><title>rust-fdmbpm (513 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(223,113,26)" fg:x="0" fg:w="513"/><text x="0.2500%" y="367.50">rust-fdmbpm</text></g><g><title>_start (466 samples, 90.84%)</title><rect x="9.1618%" y="341" width="90.8382%" height="15" fill="rgb(206,192,2)" fg:x="47" fg:w="466"/><text x="9.4118%" y="351.50">_start</text></g><g><title>_dl_start (2 samples, 0.39%)</title><rect x="99.6101%" y="325" width="0.3899%" height="15" fill="rgb(241,108,4)" fg:x="511" fg:w="2"/><text x="99.8601%" y="335.50"></text></g><g><title>_dl_sysdep_start (2 samples, 0.39%)</title><rect x="99.6101%" y="309" width="0.3899%" height="15" fill="rgb(247,173,49)" fg:x="511" fg:w="2"/><text x="99.8601%" y="319.50"></text></g><g><title>init_cpu_features.constprop.0 (1 samples, 0.19%)</title><rect x="99.8051%" y="293" width="0.1949%" height="15" fill="rgb(224,114,35)" fg:x="512" fg:w="1"/><text x="100.0551%" y="303.50"></text></g><g><title>handle_intel.constprop.0 (1 samples, 0.19%)</title><rect x="99.8051%" y="277" width="0.1949%" height="15" fill="rgb(245,159,27)" fg:x="512" fg:w="1"/><text x="100.0551%" y="287.50"></text></g><g><title>intel_check_word.constprop.0 (1 samples, 0.19%)</title><rect x="99.8051%" y="261" width="0.1949%" height="15" fill="rgb(245,172,44)" fg:x="512" fg:w="1"/><text x="100.0551%" y="271.50"></text></g></svg></svg>